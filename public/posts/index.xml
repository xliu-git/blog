<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Xiaohan Liu Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Xiaohan Liu Blog</description>
    <image>
      <title>Xiaohan Liu Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.140.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Dec 2024 17:19:16 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常见面试题-线程</title>
      <link>http://localhost:1313/posts/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 22 Dec 2024 17:19:16 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%BA%BF%E7%A8%8B/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建线程的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承Thread类
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class ThreadTest {
    public static void main(String[] args) {
        System.out.println(&amp;#34;Main thread: &amp;#34; + Thread.currentThread());
        TestThread testThread = new TestThread();

        // run at a new thread
        testThread.start();

        // still run at the current thread
        testThread.run();
    }
}   

class TestThread extends Thread {
    @Override
    public void run() {
        System.out.println(&amp;#34;Test thread extends Thread class: &amp;#34; + Thread.currentThread());
    }
}
&lt;/code&gt;&lt;/pre&gt;输出
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Main thread: Thread[main,5,main]
Test thread extends Thread class: Thread[main,5,main]
Test thread extends Thread class: Thread[Thread-0,5,main]
&lt;/code&gt;&lt;/pre&gt;这里也可以很明显的看出来start和run的区别，start是新拉一个线程跑，run是直接调用类方法。且start方法只能被调用一次，源码在这里首先检测了一下state，非0的话报错，进一步应该是通过调用一个native方法start0()。
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * This method is not invoked for the main method thread or &amp;#34;system&amp;#34;
 * group threads created/set up by the VM. Any new functionality added
 * to this method in the future may have to also be added to the VM.
 *
 * A zero status value corresponds to state &amp;#34;NEW&amp;#34;.
 */
if (threadStatus != 0)
    throw new IllegalThreadStateException();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;实现Runnable&lt;br&gt;
Runnable是一个接口，通过实现Runnable接口，在创建Thread的时候可以直接使用有Runnable参数的构造函数
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class ThreadTest {
    public static void main(String[] args) {
        System.out.println(&amp;#34;Main thread: &amp;#34; + Thread.currentThread());
        Thread testThread = new Thread(new TestRunnable());
        testThread.start();
    }
}

class TestRunnable implements Runnable {

    @Override
    public void run() {
        System.out.println(&amp;#34;TestRunnable: &amp;#34; + Thread.currentThread());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;实现Callable&lt;br&gt;
Callable也是一个接口，比Runnable优越的地方在于可以返回值，且可以返回检查过的异常。
Java推荐直接用ExecutoreService来submit Callable，这里有一个很有趣的问题就是为什么Thread没有像Runnable那样直接给Callabla提供一个构造函数。&lt;br&gt;
简单查了一下，首先是因为历史兼容性的问题，Thread与Runnable早在Java 1.0时代就已经发布了，而Callable则是在Java 1.5的&lt;code&gt;java.util.concurrent&lt;/code&gt;
发布的，为了保证向后兼容性（新代码跑在老版本上），Thread并没有实现或者提供Callable。&lt;br&gt;
其次是因为Java逻辑上的设计，thread与task是两个不同的
概念，想象一下thread作为一个worker，而task作为一个work，比起为每个线程指定一个work这种“从一而终”的设计，这种解耦具有更好的性能，毕竟线程是系统中很珍贵的计算资源的抽象, 在这种设计下，一个thread可以重复利用执行不同的work，以及一个work也可以在不同的线程中并发处理。简而言之就是thread以及executor负责how to execute，
而task负责what to execute。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ExecutorService es = Executors.newSingleThreadExecutor();
es.submit(() -&amp;gt; {
    System.out.println(&amp;#34;Callable function: &amp;#34; + Thread.currentThread());
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然Thread并没有直接提供Callable相关的接口，但是FutureTask实际弥补了Runnable和Callable之间的gap，通过FutureTask来执行Callable，同时传参给Thread，也可以间接实现Thread对于Callable的调用，但要注意这里实际的Callable异常处理是发生在FutureTask中的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用GitHub托管Hugo博客</title>
      <link>http://localhost:1313/posts/%E4%BD%BF%E7%94%A8github%E6%89%98%E7%AE%A1hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 20 Dec 2024 21:14:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E4%BD%BF%E7%94%A8github%E6%89%98%E7%AE%A1hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h3 id=&#34;新建一个github仓库用于托管博客&#34;&gt;新建一个GitHub仓库用于托管博客&lt;/h3&gt;
&lt;p&gt;直接去GitHub创建一个仓库即可，这里要注意GitHub page分为&lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-a-repository-for-your-site&#34;&gt;user/org site和project site&lt;/a&gt;，如果是user site，仓库名要符合&lt;code&gt;&amp;lt;user&amp;gt;.github.io&lt;/code&gt;，因为我已经有了user site，所以在这里随便创建了一个名为&lt;code&gt;blog&lt;/code&gt;的repo。&lt;br&gt;
把仓库克隆到本地，可能是因为proxy的原因，我刚开始通过https克隆报了很多奇奇怪怪的错，最后还是使用了ssh下载下来的（通过ssh连接GitHub可以看&lt;a href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;这篇&lt;/a&gt;）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone git@github.com:xliu-git/blog.git
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装hugo&#34;&gt;安装Hugo&lt;/h3&gt;
&lt;p&gt;Hugo是一个由Go生成的静态网站生成器，同类型的静态网站生成器还有Hexo、Jekyll等，都比较常见于个人博客，Hugo号称渲染速度更快， 我直接用的Hombrew装的，安装指南可以参考&lt;a href=&#34;https://www.gohugo.org/&#34;&gt;Hugo文档&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install Hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证一下安装是否成功&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;本地搭建博客&#34;&gt;本地搭建博客&lt;/h3&gt;
&lt;p&gt;Hugo提供了很多的&lt;a href=&#34;https://themes.gohugo.io/tags/blog/&#34;&gt;博客模版&lt;/a&gt;，不同的模版在后续的配置中也有一些不同，可以直接参考模版的README来进行配置。
我使用的是模版&lt;code&gt;PaperMod&lt;/code&gt;，进入本地仓库根目录，使用Hugo新建一个静态网站，因为&lt;code&gt;PaperMod&lt;/code&gt;推荐使用yaml配置，所以加上了yaml option&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site . --force --format yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过git submodule来使用模版&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git submodule add git@github.com:adityatelange/hugo-PaperMod.git themes/PaperMod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行Hugo，根据运行提示点开相应的本地端口（e.g. http://localhost:1313/）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hugo会按照模版生成public文件夹，也就是一个完整的静态网站，通过调整config文件，可以实现一些模版里特定的&lt;a href=&#34;https://github.com/adityatelange/hugo-PaperMod/wiki/Features&#34;&gt;feature&lt;/a&gt;。通过Hugo new content可以发布文章，并在本地编辑md文件以及查看&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new content content/posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加持续部署脚本&#34;&gt;添加持续部署脚本&lt;/h3&gt;
&lt;p&gt;GitHub Page的托管大概分两种，一种是在根目录或者/docs提供entry file，比如&lt;code&gt;index.html&lt;/code&gt;、&lt;code&gt;index.md&lt;/code&gt;、&lt;code&gt;README.md&lt;/code&gt;；另一种是通过一个GitHub Actions workflow，提供一个部署脚本，Hugo提供了一个非常详细的指南关于&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;怎么在GitHub Page上托管Hugo项目&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;在githubworkflows创建部署脚本hugoyaml&#34;&gt;在.github/workflows创建部署脚本hugo.yaml&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p .github/workflows
touch hugo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;复制粘贴到githubworkflowshugoyaml&#34;&gt;复制粘贴到&lt;code&gt;.github/workflows/hugo.yaml&lt;/code&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: &amp;#34;pages&amp;#34;
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.137.1
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          &amp;amp;&amp;amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: &amp;#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] &amp;amp;&amp;amp; npm ci || true&amp;#34;
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL &amp;#34;${{ steps.pages.outputs.base_url }}/&amp;#34;          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;把部署模式改成github-actions&#34;&gt;把部署模式改成GitHub Actions&lt;/h4&gt;
&lt;p&gt;找到相应仓库的Settings -&amp;gt; Pages -&amp;gt; Build and deployment设置成GitHub Actions&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
