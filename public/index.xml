<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xiaohan Liu Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Xiaohan Liu Blog</description>
    <image>
      <title>Xiaohan Liu Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.140.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Mar 2025 21:25:33 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MCP小结</title>
      <link>http://localhost:1313/posts/mcp%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Sun, 30 Mar 2025 21:25:33 +0800</pubDate>
      <guid>http://localhost:1313/posts/mcp%E5%B0%8F%E7%BB%93/</guid>
      <description>&lt;h3 id=&#34;什么是mcp&#34;&gt;什么是MCP&lt;/h3&gt;
&lt;p&gt;MCP是一个标准化协议（protocol），规定了应用和大模型之间的通信格式，比如我们常说的USB-C就是一种协议，同一种协议，不同厂家的具体实现可能有很多种，比如USB2.0 Type-C, USB3.1 Gen1 Type-C, Thunderbolt3/4 Type-C等。&lt;/p&gt;
&lt;h3 id=&#34;mcp宏观架构&#34;&gt;MCP宏观架构&lt;/h3&gt;
&lt;p&gt;我根据&lt;a href=&#34;https://modelcontextprotocol.io/introduction#general-architecture&#34;&gt;MCP introduction的图&lt;/a&gt;，以及官方给出的MCP Server和Client的例子，结合自己的理解画了一张图。
&lt;img loading=&#34;lazy&#34; src=&#34;./MCP_Architecture.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Host:一个应用，或者更抽象，应用中的一个connection pool，维护着各种MCP Client的connection instances。&lt;/li&gt;
&lt;li&gt;MCP Client:我在这里把client理解成一个跟其他通信协议类似的client，比如http client、webSocket client，负责跟具体server的connection。&lt;/li&gt;
&lt;li&gt;MCP Server:即提供相应服务的“server”，这里的server可能只是一层调用外部service provider API的封装，当然，内部的依赖也可以有native的MCP Server。&lt;/li&gt;
&lt;li&gt;Orchestration Service:负责组合各种MCP Client的tool，决定什么时候调用哪个MCP client的哪种tool，并通过返回的response进行下一步的工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mcp-server例子&#34;&gt;MCP Server例子&lt;/h3&gt;
&lt;p&gt;我最开始对于MCP Server的理解是Service Provider专门针对MCP协议所部属的server，那么所有的MCP Server的开发工作应该属于Service Provider，但查看了一下&lt;a href=&#34;https://github.com/modelcontextprotocol/servers/tree/main/src/github&#34;&gt;github为Claude给出的MCP Server例子&lt;/a&gt;后发现MCP Server其实更类似于一种本地对于service provider的封装，或者说专门针对MCP协议路由的controller，提供MCP协议要求的服务，至于服务的具体实现，则是通过service provider原有的API call实现的。&lt;/p&gt;
&lt;p&gt;以github的MCP server为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供tool列表、描述以及schema：https://github.com/modelcontextprotocol/servers/blob/main/src/github/index.ts#L71&lt;/li&gt;
&lt;li&gt;提供tool路由：https://github.com/modelcontextprotocol/servers/blob/main/src/github/index.ts#L208&lt;/li&gt;
&lt;li&gt;运行tool（通过API实现）：https://github.com/modelcontextprotocol/servers/blob/main/src/github/operations/commits.ts#L12&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;https://modelcontextprotocol.io/introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>使用GitHub托管Hugo博客</title>
      <link>http://localhost:1313/posts/%E4%BD%BF%E7%94%A8github%E6%89%98%E7%AE%A1hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 20 Dec 2024 21:14:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E4%BD%BF%E7%94%A8github%E6%89%98%E7%AE%A1hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h3 id=&#34;新建一个github仓库用于托管博客&#34;&gt;新建一个GitHub仓库用于托管博客&lt;/h3&gt;
&lt;p&gt;直接去GitHub创建一个仓库即可，这里要注意GitHub page分为&lt;a href=&#34;https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-a-repository-for-your-site&#34;&gt;user/org site和project site&lt;/a&gt;，如果是user site，仓库名要符合&lt;code&gt;&amp;lt;user&amp;gt;.github.io&lt;/code&gt;，因为我已经有了user site，所以在这里随便创建了一个名为&lt;code&gt;blog&lt;/code&gt;的repo。&lt;br&gt;
把仓库克隆到本地，可能是因为proxy的原因，我刚开始通过https克隆报了很多奇奇怪怪的错，最后还是使用了ssh下载下来的（通过ssh连接GitHub可以看&lt;a href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;这篇&lt;/a&gt;）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone git@github.com:xliu-git/blog.git
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装hugo&#34;&gt;安装Hugo&lt;/h3&gt;
&lt;p&gt;Hugo是一个由Go生成的静态网站生成器，同类型的静态网站生成器还有Hexo、Jekyll等，都比较常见于个人博客，Hugo号称渲染速度更快， 我直接用的Hombrew装的，安装指南可以参考&lt;a href=&#34;https://www.gohugo.org/&#34;&gt;Hugo文档&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install Hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证一下安装是否成功&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;本地搭建博客&#34;&gt;本地搭建博客&lt;/h3&gt;
&lt;p&gt;Hugo提供了很多的&lt;a href=&#34;https://themes.gohugo.io/tags/blog/&#34;&gt;博客模版&lt;/a&gt;，不同的模版在后续的配置中也有一些不同，可以直接参考模版的README来进行配置。
我使用的是模版&lt;code&gt;PaperMod&lt;/code&gt;，进入本地仓库根目录，使用Hugo新建一个静态网站，因为&lt;code&gt;PaperMod&lt;/code&gt;推荐使用yaml配置，所以加上了yaml option&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site . --force --format yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过git submodule来使用模版&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git submodule add git@github.com:adityatelange/hugo-PaperMod.git themes/PaperMod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行Hugo，根据运行提示点开相应的本地端口（e.g. http://localhost:1313/）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hugo会按照模版生成public文件夹，也就是一个完整的静态网站，通过调整config文件，可以实现一些模版里特定的&lt;a href=&#34;https://github.com/adityatelange/hugo-PaperMod/wiki/Features&#34;&gt;feature&lt;/a&gt;。通过Hugo new content可以发布文章，并在本地编辑md文件以及查看&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new content content/posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加持续部署脚本&#34;&gt;添加持续部署脚本&lt;/h3&gt;
&lt;p&gt;GitHub Page的托管大概分两种，一种是在根目录或者/docs提供entry file，比如&lt;code&gt;index.html&lt;/code&gt;、&lt;code&gt;index.md&lt;/code&gt;、&lt;code&gt;README.md&lt;/code&gt;；另一种是通过一个GitHub Actions workflow，提供一个部署脚本，Hugo提供了一个非常详细的指南关于&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;怎么在GitHub Page上托管Hugo项目&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;在githubworkflows创建部署脚本hugoyaml&#34;&gt;在.github/workflows创建部署脚本hugo.yaml&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p .github/workflows
touch hugo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;复制粘贴到githubworkflowshugoyaml&#34;&gt;复制粘贴到&lt;code&gt;.github/workflows/hugo.yaml&lt;/code&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: &amp;#34;pages&amp;#34;
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.137.1
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          &amp;amp;&amp;amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: &amp;#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] &amp;amp;&amp;amp; npm ci || true&amp;#34;
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL &amp;#34;${{ steps.pages.outputs.base_url }}/&amp;#34;          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;把部署模式改成github-actions&#34;&gt;把部署模式改成GitHub Actions&lt;/h4&gt;
&lt;p&gt;找到相应仓库的Settings -&amp;gt; Pages -&amp;gt; Build and deployment设置成GitHub Actions&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
